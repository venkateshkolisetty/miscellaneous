=encoding utf8

=head1 NAME

Mail::Box::Maildir - handle Maildir folders

=head1 INHERITANCE

 Mail::Box::Maildir
   is a Mail::Box::Dir
   is a Mail::Box
   is a Mail::Reporter

=head1 SYNOPSIS

 use Mail::Box::Maildir;
 my $folder = new Mail::Box::Maildir folder => $ENV{MAIL}, ...;

=head1 DESCRIPTION

This documentation describes how Maildir mailboxes work, and what you
can do with the Maildir folder object C<Mail::Box::Maildir>.

Maildir is B<not supported for Windows>, because it create filenames
which are not accepted by the Windows system.

Extends L<"DESCRIPTION" in Mail::Box::Dir|Mail::Box::Dir/"DESCRIPTION">.
 
=head1 OVERLOADED

Extends L<"OVERLOADED" in Mail::Box::Dir|Mail::Box::Dir/"OVERLOADED">.
 
=over 4

=item overload: B<"">

Inherited, see L<Mail::Box/"OVERLOADED">

=item overload: B<@{}>

Inherited, see L<Mail::Box/"OVERLOADED">

=item overload: B<cmp>

Inherited, see L<Mail::Box/"OVERLOADED">

=back

=head1 METHODS

Extends L<"METHODS" in Mail::Box::Dir|Mail::Box::Dir/"METHODS">.
 
=head2 Constructors

Extends L<"Constructors" in Mail::Box::Dir|Mail::Box::Dir/"Constructors">.
 
=over 4

=item Mail::Box::Maildir-E<gt>B<new>(%options)

 -Option           --Defined in     --Default
  accept_new                          <false>
  access             Mail::Box        'r'
  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
  body_type          Mail::Box        Mail::Message::Body::Lines
  coerce_options     Mail::Box        []
  create             Mail::Box        <false>
  directory          Mail::Box::Dir   <derived from folder name>
  extract            Mail::Box        10240
  field_type         Mail::Box        undef
  fix_headers        Mail::Box        <false>
  folder             Mail::Box        $ENV{MAIL}
  folderdir          Mail::Box        $ENV{HOME}/.maildir
  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
  head_type          Mail::Box        Mail::Message::Head::Complete
  keep_dups          Mail::Box        <false>
  lock_file          Mail::Box        <not used>
  lock_timeout       Mail::Box        <not used>
  lock_type          Mail::Box        'NONE' (constant)
  lock_wait          Mail::Box        <not used>
  locker             Mail::Box        undef
  log                Mail::Reporter   'WARNINGS'
  manager            Mail::Box        undef
  message_type       Mail::Box        <folder-class>::Message
  multipart_type     Mail::Box        Mail::Message::Body::Multipart
  remove_when_empty  Mail::Box        <true>
  save_on_exit       Mail::Box        <true>
  trace              Mail::Reporter   'WARNINGS'
  trusted            Mail::Box        <depends on folder location>

=over 2

=item accept_new => BOOLEAN

When the folder is open, some messages may be stored in the C<new>
sub-directory.  By default, these messages are immediately moved to
the C<cur> directory when the folder is opened.  Otherwise, you have
to call L<acceptMessages()|Mail::Box::Maildir/"Internals"> or L<Mail::Box::Maildir::Message::accept()|Mail::Box::Maildir::Message/"Internals">.

=item access => MODE

=item body_delayed_type => CLASS

=item body_type => CLASS|CODE

=item coerce_options => ARRAY

=item create => BOOLEAN

=item directory => DIRECTORY

=item extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'

=item field_type => CLASS

=item fix_headers => BOOLEAN

=item folder => FOLDERNAME

=item folderdir => DIRECTORY

=item head_delayed_type => CLASS

=item head_type => CLASS

=item keep_dups => BOOLEAN

=item lock_file => FILENAME

=item lock_timeout => SECONDS

=item lock_type => CLASS|STRING|ARRAY

=item lock_wait => SECONDS

=item locker => OBJECT

=item log => LEVEL

=item manager => MANAGER

=item message_type => CLASS

=item multipart_type => CLASS

=item remove_when_empty => BOOLEAN

=item save_on_exit => BOOLEAN

=item trace => LEVEL

=item trusted => BOOLEAN

=back

=back

=head2 The folder

Extends L<"The folder" in Mail::Box::Dir|Mail::Box::Dir/"The folder">.
 
=over 4

=item $obj-E<gt>B<addMessage>($message, %options)

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<addMessages>(@messages)

Inherited, see L<Mail::Box/"The folder">

=item Mail::Box::Maildir-E<gt>B<appendMessages>(%options)

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<close>(%options)

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<copyTo>($folder, %options)

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<delete>(%options)

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<directory>()

Inherited, see L<Mail::Box::Dir/"The folder">

=item $obj-E<gt>B<folderdir>( [$directory] )

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<name>()

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<organization>()

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<size>()

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<type>()

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<update>(%options)

Inherited, see L<Mail::Box/"The folder">

=item $obj-E<gt>B<url>()

Inherited, see L<Mail::Box/"The folder">

=back

=head2 Folder flags

Extends L<"Folder flags" in Mail::Box::Dir|Mail::Box::Dir/"Folder flags">.
 
=over 4

=item $obj-E<gt>B<access>()

Inherited, see L<Mail::Box/"Folder flags">

=item $obj-E<gt>B<isModified>()

Inherited, see L<Mail::Box/"Folder flags">

=item $obj-E<gt>B<modified>( [BOOLEAN] )

Inherited, see L<Mail::Box/"Folder flags">

=item $obj-E<gt>B<writable>()

Inherited, see L<Mail::Box/"Folder flags">

=back

=head2 The messages

Extends L<"The messages" in Mail::Box::Dir|Mail::Box::Dir/"The messages">.
 
=over 4

=item $obj-E<gt>B<current>( [$number|$message|$message_id] )

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<find>($message_id)

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<findFirstLabeled>( $label, [BOOLEAN, [$msgs]] )

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<message>( $index, [$message] )

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<messageId>( $message_id, [$message] )

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<messageIds>()

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<messages>( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<nrMessages>(%options)

Inherited, see L<Mail::Box/"The messages">

=item $obj-E<gt>B<scanForMessages>($message, $message_ids, $timespan, $window)

Inherited, see L<Mail::Box/"The messages">

=back

=head2 Sub-folders

Extends L<"Sub-folders" in Mail::Box::Dir|Mail::Box::Dir/"Sub-folders">.
 
=over 4

=item $obj-E<gt>B<listSubFolders>(%options)

=item Mail::Box::Maildir-E<gt>B<listSubFolders>(%options)

Inherited, see L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<nameOfSubFolder>( $subname, [$parentname] )

=item Mail::Box::Maildir-E<gt>B<nameOfSubFolder>( $subname, [$parentname] )

Inherited, see L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<openRelatedFolder>(%options)

Inherited, see L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<openSubFolder>($subname, %options)

Inherited, see L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<topFolderWithMessages>()

=item Mail::Box::Maildir-E<gt>B<topFolderWithMessages>()

Inherited, see L<Mail::Box/"Sub-folders">

=back

=head2 Internals

Extends L<"Internals" in Mail::Box::Dir|Mail::Box::Dir/"Internals">.
 
=over 4

=item $obj-E<gt>B<acceptMessages>()

Accept all messages which are waiting in the C<new> directory to be
moved to the C<cur> directory.  This will not rescan the directory
for newly arrived messages, because that's a task for L<update()|Mail::Box/"The folder">.

=item Mail::Box::Maildir-E<gt>B<appendMessage>(%options)

=item $obj-E<gt>B<coerce>($message, %options)

=item $obj-E<gt>B<create>($foldername, %options)

=item Mail::Box::Maildir-E<gt>B<create>($foldername, %options)

 -Option   --Defined in--Default
  folderdir  Mail::Box   undef

=over 2

=item folderdir => DIRECTORY

=back

=item $obj-E<gt>B<createDirs>($folderdir)

=item Mail::Box::Maildir-E<gt>B<createDirs>($folderdir)

The $folderdir contains the absolute path of the location where the
messages are kept.  Maildir folders contain a C<tmp>, C<new>, and
C<cur> sub-directory within that folder directory as well.  This
method will ensure that all directories exist.
Returns false on failure.

=item $obj-E<gt>B<determineBodyType>($message, $head)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<folderIsEmpty>($folderdir)

=item Mail::Box::Maildir-E<gt>B<folderIsEmpty>($folderdir)

Checks whether the folder whose directory is specified as absolute $folderdir
is empty or not.  A folder is empty when the C<tmp>, C<new>, and C<cur>
subdirectories are empty and some files which are left there by application
programs.  The maildir spec explicitly states: C<.qmail>, C<bulletintime>,
C<bulletinlock> and C<seriallock>.  If any other files are found, the
directory is considered not-empty.

=item $obj-E<gt>B<folderToDirectory>($foldername, $folderdir)

Inherited, see L<Mail::Box::Dir/"Internals">

=item Mail::Box::Maildir-E<gt>B<foundIn>( [$foldername], %options )

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<lineSeparator>( [<STRING|'CR'|'LF'|'CRLF'>] )

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<locker>()

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<read>(%options)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<readMessageFilenames>($directory)

Inherited, see L<Mail::Box::Dir/"Internals">

=item $obj-E<gt>B<readMessages>(%options)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<storeMessage>($message)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<toBeThreaded>($messages)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<toBeUnthreaded>($messages)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<updateMessages>(%options)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<write>(%options)

Inherited, see L<Mail::Box/"Internals">

=item $obj-E<gt>B<writeMessages>(%options)

Inherited, see L<Mail::Box/"Internals">

=back

=head2 Other methods

Extends L<"Other methods" in Mail::Box::Dir|Mail::Box::Dir/"Other methods">.
 
=over 4

=item $obj-E<gt>B<timespan2seconds>($time)

=item Mail::Box::Maildir-E<gt>B<timespan2seconds>($time)

Inherited, see L<Mail::Box/"Other methods">

=back

=head2 Error handling

Extends L<"Error handling" in Mail::Box::Dir|Mail::Box::Dir/"Error handling">.
 
=over 4

=item $obj-E<gt>B<AUTOLOAD>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>($object)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

=item Mail::Box::Maildir-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>( [$level, [$strings]] )

=item Mail::Box::Maildir-E<gt>B<log>( [$level, [$strings]] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>($level)

=item Mail::Box::Maildir-E<gt>B<logPriority>($level)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>()

Inherited, see L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

Extends L<"Cleanup" in Mail::Box::Dir|Mail::Box::Dir/"Cleanup">.
 
=over 4

=item $obj-E<gt>B<DESTROY>()

Inherited, see L<Mail::Box/"Cleanup">

=back

=head1 DETAILS

The explanation is complicated, but for normal use you should bother
yourself with all details.

Extends L<"DETAILS" in Mail::Box::Dir|Mail::Box::Dir/"DETAILS">.
 
=head2 Different kinds of folders

Extends L<"Different kinds of folders" in Mail::Box::Dir|Mail::Box::Dir/"Different kinds of folders">.
 
=head2 Available folder types

Extends L<"Available folder types" in Mail::Box::Dir|Mail::Box::Dir/"Available folder types">.
 
=head2 Folder class implementation

Extends L<"Folder class implementation" in Mail::Box::Dir|Mail::Box::Dir/"Folder class implementation">.
 
=head2 How MAILDIR folders work

Maildir-type folders use a directory to store the messages of one folder.
Each message is stored in a separate file.  This seems useful, because
changes in a folder change only a few of these small files, in contrast with
file-based folders where changes in a folder cause rewrites of huge
folder-files.

However, Maildir based folders perform very bad if you need header information
of all messages.  For instance, if you want to have full knowledge about
all message-threads (see L<Mail::Box::Thread::Manager|Mail::Box::Thread::Manager>) in the folder, it
requires to read all header lines in all message files.  And usually, reading
your messages as threads is desired.  Maildir maintains a tiny amount
of info visible in the filename, which may make it perform just a little
bit faster than MH.

=head1 DIAGNOSTICS

=over 4

=item Error: Cannot append Maildir message in $new to folder $self.

The message (or messages) could not be stored in the right directories
for the Maildir folder.

=item Error: Cannot create Maildir directory $dir: $!

A Maildir folder is represented by a directory, with some sub-directories.  The
top folder directory could not be created for the reason indicated.

=item Error: Cannot create Maildir folder $name.

One or more of the directories required to administer a Maildir folder
could not be created.

=item Error: Cannot create Maildir message file $new.

A message is converted from some other message format into a Maildir format
by writing it to a file with a name which contains the status flags of the
message.  Apparently, creating this file failed.

=item Error: Cannot create Maildir subdir $dir: $!

Each Maildir folder has three sub-directories for administration: C<new>,
C<tmp>, and C<cur>.  The mentioned directory could not be created for
the indicated reason.

=item Warning: Changes not written to read-only folder $self.

You have opened the folder read-only --which is the default set
by L<new(access)|Mail::Box/"Constructors">--, made modifications, and now want to close it.
Set L<close(force)|Mail::Box/"The folder"> if you want to overrule the access mode, or close
the folder with L<close(write)|Mail::Box/"The folder"> set to C<NEVER>.

=item Error: Copying failed for one message.

For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.

=item Error: Destination folder $name is not writable.

The folder where the messages are copied to is not opened with write
access (see L<new(access)|Mail::Box/"Constructors">).  This has no relation with write permission
to the folder which is controled by your operating system.

=item Warning: Different messages with id $msgid

The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.

=item Error: Folder $name is opened read-only

You can not write to this folder unless you have opened the folder to
write or append with L<new(access)|Mail::Box/"Constructors">, or the C<force> option is set true.

=item Error: Folder $name not deleted: not writable.

The folder must be opened with write access via L<new(access)|Mail::Box/"Constructors">, otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
C<delete> method permits you to.  The reverse remark is valid as well.

=item Error: Invalid timespan '$timespan' specified.

The string does not follow the strict rules of the time span syntax which
is permitted as parameter.

=item Warning: Message-id '$msgid' does not contain a domain.

According to the RFCs, message-ids need to contain a unique random part,
then an C<@>, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the C<@> is
missing from the string.

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=item Error: Unable to create subfolder $name of $folder.

The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.

=item Error: Writing folder $name failed

For some reason (you probably got more error messages about this problem)
it is impossible to write the folder, although you should because there
were changes made.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.120,
built on September 21, 2016. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2016 by [Mark Overmeer]. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

