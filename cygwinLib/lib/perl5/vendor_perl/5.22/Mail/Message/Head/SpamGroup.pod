=encoding utf8

=head1 NAME

Mail::Message::Head::SpamGroup - spam fighting related header fields

=head1 INHERITANCE

 Mail::Message::Head::SpamGroup
   is a Mail::Message::Head::FieldGroup
   is a Mail::Reporter

=head1 SYNOPSIS

 my $sg = Mail::Message::Head::SpamGroup->new(head => $head, ...);
 $head->addSpamGroup($sg);

 my $sg = $head->addSpamGroup( <options> );
 $sg->delete;
 
 my @sgs = $head->spamGroups;

=head1 DESCRIPTION

A I<spam group> is a set of header fields which are added by spam detection
and spam fighting software.  This class knows various details about
that software.

Extends L<"DESCRIPTION" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"DESCRIPTION">.
 
=head1 METHODS

Extends L<"METHODS" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"METHODS">.
 
=head2 Constructors

Extends L<"Constructors" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"Constructors">.
 
=over 4

=item $obj-E<gt>B<clone>()

Inherited, see L<Mail::Message::Head::FieldGroup/"Constructors">

=item $obj-E<gt>B<fighter>( $name, [$settings] )

=item Mail::Message::Head::SpamGroup-E<gt>B<fighter>( $name, [$settings] )

Get the $settings of a certain spam-fighter, optionally after setting them.
The L<knownFighters()> method returns the defined names.  The names
are case-sensitive.

 -Option --Default
  fields   <required>
  isspam   <required>
  version  undef

=over 2

=item fields => REGEXP

The regular expression which indicates which of the header fields are
added by the spam fighter software.

=item isspam => CODE

The CODE must return true or false, to indicate whether the spam fighter
thinks that the message contains spam.  The CODE ref is called with
the spamgroup object (under construction) and the header which is inspected.

=item version => CODE

Can be called to collect the official name and the version of the
software which is used to detect spam.  The CODE ref is called with
the spamgroup object (under construction) and the header which is inspected.

=back

example: adding your own spam-fighter definitions

 Mail::Message::Head::SpamGroup->fighter( 'MY-OWN',
    fields => qw/^x-MY-SPAM-DETECTOR-/,
    isspam => sub { my ($sg, $head) = @_; $head->fields > 100 }
   );

=item $obj-E<gt>B<from>($head|$message, %options)

Returns a list of C<Mail::Message::Head::SpamGroup> objects, based on the
specified $message or message $head.

 -Option--Default
  types   undef

=over 2

=item types => ARRAY-OF-NAMES

Only the specified types will be tried.  If the ARRAY is empty, an empty
list is returned.  Without this option, all sets are returned.

=back

=item $obj-E<gt>B<habeasSweFieldsCorrect>( [$message|$head] )

=item Mail::Message::Head::SpamGroup-E<gt>B<habeasSweFieldsCorrect>( [$message|$head] )

Returns a true value if the $message or $head contains C<Habeas-SWE> fields
which are correct.  Without argument, this is used as instance method on
an existing Spam-Group.

example: checking Habeas-SWE fields

 if(Mail::Message::Head::SpamGroup->habeasSweFieldsCorrect($message))
 {   $message->label(spam => 0);
 }

 my $sg = $message->head->spamGroups('Habeas-SWE');
 if($sg->habeasSweFieldsCorrect) { ... };

 use List::Util 'first';
 if(first {$_->habeasSweFieldsCorrect} $head->spamGroups)
 {   ...
 }

=item $obj-E<gt>B<implementedTypes>()

=item Mail::Message::Head::SpamGroup-E<gt>B<implementedTypes>()

Inherited, see L<Mail::Message::Head::FieldGroup/"Constructors">

=item $obj-E<gt>B<isSpamGroupFieldName>($name)

=item Mail::Message::Head::SpamGroup-E<gt>B<isSpamGroupFieldName>($name)

=item $obj-E<gt>B<knownFighters>()

=item Mail::Message::Head::SpamGroup-E<gt>B<knownFighters>()

Returns an unsorted list of all names representing pre-defined spam-fighter
software.  You can ask details about them, and register more fighters with
the L<fighter()|Mail::Message::Head::SpamGroup/"Constructors"> method.

=item Mail::Message::Head::SpamGroup-E<gt>B<new>($fields, %options)

Construct an object which maintains one set of fields which were added
by spam fighting software.

 -Option  --Defined in                     --Default
  head      Mail::Message::Head::FieldGroup  undef
  log       Mail::Reporter                   'WARNINGS'
  software  Mail::Message::Head::FieldGroup  undef
  trace     Mail::Reporter                   'WARNINGS'
  type      Mail::Message::Head::FieldGroup  undef
  version   Mail::Message::Head::FieldGroup  undef

=over 2

=item head => HEAD

=item log => LEVEL

=item software => STRING

=item trace => LEVEL

=item type => STRING

=item version => STRING

=back

=item $obj-E<gt>B<spamDetected>( [BOOLEAN] )

Returns (after setting) whether this group of spam headers thinks that
this is spam.  See L<Mail::Message::Head::Complete::spamDetected()|Mail::Message::Head::Complete/"Access to the header">.

example: 

  die if $head->spamDetected;

  foreach my $sg ($head->spamGroups)
  {   print $sg->type." found spam\n" if $sg->spamDetected;
  }

=back

=head2 The header

Extends L<"The header" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"The header">.
 
=over 4

=item $obj-E<gt>B<add>( <$field, $value> | $object )

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=item $obj-E<gt>B<addFields>( [$fieldnames] )

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=item $obj-E<gt>B<attach>($head)

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=item $obj-E<gt>B<delete>()

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=item $obj-E<gt>B<fieldNames>()

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=item $obj-E<gt>B<fields>()

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=item $obj-E<gt>B<head>()

Inherited, see L<Mail::Message::Head::FieldGroup/"The header">

=back

=head2 Access to the header

Extends L<"Access to the header" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"Access to the header">.
 
=over 4

=item $obj-E<gt>B<software>()

Inherited, see L<Mail::Message::Head::FieldGroup/"Access to the header">

=item $obj-E<gt>B<type>()

Inherited, see L<Mail::Message::Head::FieldGroup/"Access to the header">

=item $obj-E<gt>B<version>()

Inherited, see L<Mail::Message::Head::FieldGroup/"Access to the header">

=back

=head2 Internals

Extends L<"Internals" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"Internals">.
 
=over 4

=item $obj-E<gt>B<collectFields>( [$name] )

Inherited, see L<Mail::Message::Head::FieldGroup/"Internals">

=item $obj-E<gt>B<detected>($type, $software, $version)

Inherited, see L<Mail::Message::Head::FieldGroup/"Internals">

=back

=head2 Error handling

Extends L<"Error handling" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"Error handling">.
 
=over 4

=item $obj-E<gt>B<AUTOLOAD>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>($object)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

=item Mail::Message::Head::SpamGroup-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<details>()

Inherited, see L<Mail::Message::Head::FieldGroup/"Error handling">

=item $obj-E<gt>B<errors>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>( [$level, [$strings]] )

=item Mail::Message::Head::SpamGroup-E<gt>B<log>( [$level, [$strings]] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>($level)

=item Mail::Message::Head::SpamGroup-E<gt>B<logPriority>($level)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<print>( [$fh] )

Inherited, see L<Mail::Message::Head::FieldGroup/"Error handling">

=item $obj-E<gt>B<report>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>()

Inherited, see L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

Extends L<"Cleanup" in Mail::Message::Head::FieldGroup|Mail::Message::Head::FieldGroup/"Cleanup">.
 
=over 4

=item $obj-E<gt>B<DESTROY>()

Inherited, see L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

=head2 Spam fighting fields

=head3 Detected spam fighting software

The L<Mail::Message::Head::SpamGroup|Mail::Message::Head::SpamGroup> class can be used to detect
fields which were produced by different spam fighting software.

=over 4

=item * SpamAssassin

These fields are added by L<Mail::SpamAssassin>, which is the central
implementation of the spam-assassin package.  The homepage of this
GPL'ed project can be found at L<http://spamassassin.org>.

=item * Habeas-SWE

Habeas tries to fight spam via the standard copyright protection
mechanism: Sender Warranted E-mail (SWE). Only when you have a contract
with Habeas, you are permitted to add a few copyrighted lines to your
e-mail. Spam senders will be refused a contract.  Mail clients which
see these nine lines are (quite) sure that the message is sincere.

See L<http://www.habeas.com> for all the details on this commercial
product.

=item * MailScanner

The MailScanner filter is developed and maintained by
transtec Computers.  The software is available for free download from
L<http://www.sng.ecs.soton.ac.uk/mailscanner/>.  Commercial support
is provided via L<http://www.mailscanner.biz>.

=back

=head1 DIAGNOSTICS

=over 4

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.120,
built on September 21, 2016. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2016 by [Mark Overmeer]. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

