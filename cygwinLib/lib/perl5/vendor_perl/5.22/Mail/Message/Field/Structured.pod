=encoding utf8

=head1 NAME

Mail::Message::Field::Structured - one line of a structured message header

=head1 INHERITANCE

 Mail::Message::Field::Structured
   is a Mail::Message::Field::Full
   is a Mail::Message::Field
   is a Mail::Reporter

 Mail::Message::Field::Structured is extended by
   Mail::Message::Field::Addresses
   Mail::Message::Field::Date
   Mail::Message::Field::URIs

=head1 SYNOPSIS

 my $f = Mail::Message::Field::Full
            ->new('Content-Type' => 'text/html');

 my @encode = (charset => 'jp', use_continuations => 1);
 $f->attribute('filename=passwd');
 $f->attribute(filename => 'passwd', @encode);

 my $attr = Mail::Message::Field::Attribute->new(...);
 $f->attribute($attr);

=head1 DESCRIPTION

Extends L<"DESCRIPTION" in Mail::Message::Field::Full|Mail::Message::Field::Full/"DESCRIPTION">.
 
=head1 OVERLOADED

Extends L<"OVERLOADED" in Mail::Message::Field::Full|Mail::Message::Field::Full/"OVERLOADED">.
 
=over 4

=item overload: B<"">

Inherited, see L<Mail::Message::Field/"OVERLOADED">

=item overload: B<0+>

Inherited, see L<Mail::Message::Field/"OVERLOADED">

=item overload: B<<=>>

Inherited, see L<Mail::Message::Field/"OVERLOADED">

=item overload: B<bool>

Inherited, see L<Mail::Message::Field/"OVERLOADED">

=item overload: B<cmp>

Inherited, see L<Mail::Message::Field/"OVERLOADED">

=item overload: B<stringification>

Inherited, see L<Mail::Message::Field::Full/"OVERLOADED">

=back

=head1 METHODS

Extends L<"METHODS" in Mail::Message::Field::Full|Mail::Message::Field::Full/"METHODS">.
 
=head2 Constructors

Extends L<"Constructors" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Constructors">.
 
=over 4

=item $obj-E<gt>B<clone>()

Inherited, see L<Mail::Message::Field/"Constructors">

=item Mail::Message::Field::Structured-E<gt>B<from>($field, %options)

Inherited, see L<Mail::Message::Field::Full/"Constructors">

=item Mail::Message::Field::Structured-E<gt>B<new>($data)

=over 4

=item * B<new> LINE

Pass a LINE as it could be found in a file: a (possibly folded) line
which is terminated by a new-line.

=item * B<new> NAME, BODY, OPTIONS

A set of values which shape the line.

=back

The NAME is a wellformed header name (you may use wellformedName()) to
be sure about the casing.  The BODY is a string, one object, or an
ref-array of objects.  In case of objects, they must fit to the
constructor of the field: the types which are accepted may differ.
The optional ATTRIBUTE list contains L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute>
objects.  Finally, there are some OPTIONS.

 -Option    --Defined in                --Default
  attributes                              []
  charset     Mail::Message::Field::Full  undef
  datum                                   undef
  encoding    Mail::Message::Field::Full  'q'
  force       Mail::Message::Field::Full  false
  language    Mail::Message::Field::Full  undef
  log         Mail::Reporter              'WARNINGS'
  trace       Mail::Reporter              'WARNINGS'

=over 2

=item attributes => ATTRS

There are various ways to specify these attributes: pass a reference
to an array which list of key-value pairs representing attributes,
or reference to a hash containing these pairs, or an array with
L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute> objects.

=item charset => STRING

=item datum => STRING

The method name I<body> is very confusing, even in the RFC.  In MailBox,
for historical reasons, L<body()|Mail::Message::Field/"Access to the body"> returns the part of the field contents
before the first semi-colon.  L<foldedBody()|Mail::Message::Field/"Access to the body"> and L<unfoldedBody()|Mail::Message::Field/"Access to the body">
address the whole field.

There is no common name for the piece of data before the parameters
(attributes) in the field-content mentioned in the RFCs, so let's call
it B<datum>.

=item encoding => 'q'|'Q'|'b'|'B'

=item force => BOOLEAN

=item language => STRING

=item log => LEVEL

=item trace => LEVEL

=back

example: of a structured field

 my @attrs   = (Mail::Message::Field::Attribute->new(...), ...);
 my @options = (extra => 'the color blue');
 my $t = Mail::Message::Field::Full->new(To => \@addrs, @attrs, @options);

=back

=head2 The field

Extends L<"The field" in Mail::Message::Field::Full|Mail::Message::Field::Full/"The field">.
 
=over 4

=item $obj-E<gt>B<isStructured>()

=item Mail::Message::Field::Structured-E<gt>B<isStructured>()

Inherited, see L<Mail::Message::Field/"The field">

=item $obj-E<gt>B<length>()

Inherited, see L<Mail::Message::Field/"The field">

=item $obj-E<gt>B<nrLines>()

Inherited, see L<Mail::Message::Field/"The field">

=item $obj-E<gt>B<print>( [$fh] )

Inherited, see L<Mail::Message::Field/"The field">

=item $obj-E<gt>B<size>()

Inherited, see L<Mail::Message::Field/"The field">

=item $obj-E<gt>B<string>( [$wrap] )

Inherited, see L<Mail::Message::Field/"The field">

=item $obj-E<gt>B<toDisclose>()

Inherited, see L<Mail::Message::Field/"The field">

=back

=head2 Access to the name

Extends L<"Access to the name" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Access to the name">.
 
=over 4

=item $obj-E<gt>B<Name>()

Inherited, see L<Mail::Message::Field/"Access to the name">

=item $obj-E<gt>B<name>()

Inherited, see L<Mail::Message::Field/"Access to the name">

=item $obj-E<gt>B<wellformedName>( [STRING] )

Inherited, see L<Mail::Message::Field/"Access to the name">

=back

=head2 Access to the body

Extends L<"Access to the body" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Access to the body">.
 
=over 4

=item $obj-E<gt>B<body>()

Inherited, see L<Mail::Message::Field/"Access to the body">

=item $obj-E<gt>B<decodedBody>(%options)

Inherited, see L<Mail::Message::Field::Full/"Access to the body">

=item $obj-E<gt>B<folded>()

Inherited, see L<Mail::Message::Field/"Access to the body">

=item $obj-E<gt>B<foldedBody>( [$body] )

Inherited, see L<Mail::Message::Field/"Access to the body">

=item $obj-E<gt>B<stripCFWS>( [STRING] )

=item Mail::Message::Field::Structured-E<gt>B<stripCFWS>( [STRING] )

Inherited, see L<Mail::Message::Field/"Access to the body">

=item $obj-E<gt>B<unfoldedBody>( [$body, [$wrap]] )

Inherited, see L<Mail::Message::Field/"Access to the body">

=back

=head2 Access to the content

Extends L<"Access to the content" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Access to the content">.
 
=over 4

=item $obj-E<gt>B<addresses>()

Inherited, see L<Mail::Message::Field/"Access to the content">

=item $obj-E<gt>B<attrPairs>()

Returns a list with attribute name and value pairs.

=item $obj-E<gt>B<attribute>( $object|<STRING, %options>|<$name,$value,%options> )

Add an attribute to the field.  The attributes are added left-to-right into
the string representation of the field, although the order of the attributes
is un-important, according to the RFCs.

You may pass a fully prepared L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute> $object,
if you like to do all preparations for correct representation of the
data yourself.  You may also pass one STRING, which is a fully prepared
attribute.  This STRING will not be changed, so be careful about quoting
and encodings.

As third possibility, you can specify an attribute $name and its $value.
An attribute object will be created for you implicitly in both
cases where such object is not supplied, passing the %options.  See
L<Mail::Message::Field::Attribute::new()|Mail::Message::Field::Attribute/"Constructors"> about the available %options.

The attribute object is returned, however, when continuations are used this
may be an object you already know about.  C<undef> is returned when
construction fails (when the attribute is incorrect).

example: 

 $f->attribute(filename => 'passwd');
 $f->attribute(filename => 'passwd', use_continuations => 0);

 my $attr = Mail::Message::Field::Attribute->new(...);
 $f->attribute($attr);

=item $obj-E<gt>B<attributes>()

Returns a list with all attributes, which are all
L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute> objects.  The attributes are not
ordered in any way.  The list may be empty.  Double attributes or
continuations are folded into one.

=item $obj-E<gt>B<beautify>()

Inherited, see L<Mail::Message::Field::Full/"Access to the content">

=item $obj-E<gt>B<comment>( [STRING] )

Inherited, see L<Mail::Message::Field/"Access to the content">

=item $obj-E<gt>B<createComment>(STRING, %options)

=item Mail::Message::Field::Structured-E<gt>B<createComment>(STRING, %options)

Inherited, see L<Mail::Message::Field::Full/"Access to the content">

=item $obj-E<gt>B<createPhrase>(STRING, %options)

=item Mail::Message::Field::Structured-E<gt>B<createPhrase>(STRING, %options)

Inherited, see L<Mail::Message::Field::Full/"Access to the content">

=item $obj-E<gt>B<study>()

Inherited, see L<Mail::Message::Field/"Access to the content">

=item $obj-E<gt>B<toDate>( [$time] )

=item Mail::Message::Field::Structured-E<gt>B<toDate>( [$time] )

Inherited, see L<Mail::Message::Field/"Access to the content">

=item $obj-E<gt>B<toInt>()

Inherited, see L<Mail::Message::Field/"Access to the content">

=back

=head2 Other methods

Extends L<"Other methods" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Other methods">.
 
=over 4

=item $obj-E<gt>B<dateToTimestamp>(STRING)

=item Mail::Message::Field::Structured-E<gt>B<dateToTimestamp>(STRING)

Inherited, see L<Mail::Message::Field/"Other methods">

=back

=head2 Internals

Extends L<"Internals" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Internals">.
 
=over 4

=item $obj-E<gt>B<consume>( $line | <$name,<$body|$objects>> )

Inherited, see L<Mail::Message::Field/"Internals">

=item $obj-E<gt>B<decode>(STRING, %options)

=item Mail::Message::Field::Structured-E<gt>B<decode>(STRING, %options)

Inherited, see L<Mail::Message::Field::Full/"Internals">

=item $obj-E<gt>B<defaultWrapLength>( [$length] )

Inherited, see L<Mail::Message::Field/"Internals">

=item $obj-E<gt>B<encode>(STRING, %options)

Inherited, see L<Mail::Message::Field::Full/"Internals">

=item $obj-E<gt>B<fold>( $name, $body, [$maxchars] )

=item Mail::Message::Field::Structured-E<gt>B<fold>( $name, $body, [$maxchars] )

Inherited, see L<Mail::Message::Field/"Internals">

=item $obj-E<gt>B<setWrapLength>( [$length] )

Inherited, see L<Mail::Message::Field/"Internals">

=item $obj-E<gt>B<stringifyData>(STRING|ARRAY|$objects)

Inherited, see L<Mail::Message::Field/"Internals">

=item $obj-E<gt>B<unfold>(STRING)

Inherited, see L<Mail::Message::Field/"Internals">

=back

=head2 Parsing

Extends L<"Parsing" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Parsing">.
 
=over 4

=item $obj-E<gt>B<consumeComment>(STRING)

=item Mail::Message::Field::Structured-E<gt>B<consumeComment>(STRING)

Inherited, see L<Mail::Message::Field::Full/"Parsing">

=item $obj-E<gt>B<consumeDotAtom>(STRING)

Inherited, see L<Mail::Message::Field::Full/"Parsing">

=item $obj-E<gt>B<consumePhrase>(STRING)

=item Mail::Message::Field::Structured-E<gt>B<consumePhrase>(STRING)

Inherited, see L<Mail::Message::Field::Full/"Parsing">

=item $obj-E<gt>B<datum>( [$value] )

The part of the field before the semi-colon (C<;>).

=item $obj-E<gt>B<parse>(STRING)

Inherited, see L<Mail::Message::Field::Full/"Parsing">

=item $obj-E<gt>B<produceBody>()

Inherited, see L<Mail::Message::Field::Full/"Parsing">

=back

=head2 Error handling

Extends L<"Error handling" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Error handling">.
 
=over 4

=item $obj-E<gt>B<AUTOLOAD>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>($object)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

=item Mail::Message::Field::Structured-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>( [$level, [$strings]] )

=item Mail::Message::Field::Structured-E<gt>B<log>( [$level, [$strings]] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>($level)

=item Mail::Message::Field::Structured-E<gt>B<logPriority>($level)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>()

Inherited, see L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

Extends L<"Cleanup" in Mail::Message::Field::Full|Mail::Message::Field::Full/"Cleanup">.
 
=over 4

=item $obj-E<gt>B<DESTROY>()

Inherited, see L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

Extends L<"DETAILS" in Mail::Message::Field::Full|Mail::Message::Field::Full/"DETAILS">.
 
=head1 DIAGNOSTICS

=over 4

=item Warning: Field content is not numerical: $content

The numeric value of a field is requested (for instance the C<Lines> or
C<Content-Length> fields should be numerical), however the data contains
weird characters.

=item Warning: Illegal character in charset '$charset'

The field is created with an utf8 string which only contains data from the
specified character set.  However, that character set can never be a valid
name because it contains characters which are not permitted.

=item Warning: Illegal character in field name $name

A new field is being created which does contain characters not permitted
by the RFCs.  Using this field in messages may break other e-mail clients
or transfer agents, and therefore mutulate or extinguish your message.

=item Warning: Illegal character in language '$lang'

The field is created with data which is specified to be in a certain language,
however, the name of the language cannot be valid: it contains characters
which are not permitted by the RFCs.

=item Warning: Illegal encoding '$encoding', used 'q'

The RFCs only permit base64 (C<b > or C<B >) or quoted-printable
(C<q> or C<Q>) encoding.  Other than these four options are illegal.

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.120,
built on September 21, 2016. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2016 by [Mark Overmeer]. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

