=encoding utf8

=head1 NAME

Mail::Message::Replace::MailInternet - fake Mail::Internet

=head1 INHERITANCE

 Mail::Message::Replace::MailInternet
   is a Mail::Message
   is a Mail::Reporter

=head1 SYNOPSIS

 !!! BETA !!!

 # change
 use Mail::Internet;
 # into
 use Mail::Message::Replace::MailInternet;
 # in existing code, and the code should still work, but
 # with the Mail::Message features.

=head1 DESCRIPTION

This module is a wrapper around a L<Mail::Message|Mail::Message>, which simulates
a L<Mail::Internet> object.  The name-space of that module is hijacked
and many methods are added.

Most methods will work without any change, but you may need to have
a look at your L<smtpsend()|Mail::Message::Replace::MailInternet/"The body"> and L<send()|Mail::Message::Replace::MailInternet/"The message"> calls.

Extends L<"DESCRIPTION" in Mail::Message|Mail::Message/"DESCRIPTION">.
 
=head1 OVERLOADED

=head1 METHODS

Extends L<"METHODS" in Mail::Message|Mail::Message/"METHODS">.
 
=head2 Constructors

Extends L<"Constructors" in Mail::Message|Mail::Message/"Constructors">.
 
=over 4

=item $obj-E<gt>B<clone>(%options)

Inherited, see L<Mail::Message/"Constructors">

=item $obj-E<gt>B<dup>()

Duplicate the message.  The result will again be a L<Mail::Internet>
compatible object.

=item $obj-E<gt>B<empty>()

Remove all data from this object.  Very dangerous!

=item Mail::Message::Replace::MailInternet-E<gt>B<new>( [$arg], [%options] )

 -Option    --Defined in     --Default
  Body                         undef
  FoldLength                   79
  Header                       undef
  MailFrom                     'KEEP'
  Modify                       0
  body        Mail::Message    undef
  body_type   Mail::Message    Mail::Message::Body::Lines
  deleted     Mail::Message    <false>
  field_type  Mail::Message    undef
  head        Mail::Message    undef
  head_type   Mail::Message    Mail::Message::Replace::MailHeader
  labels      Mail::Message    {}
  log         Mail::Reporter   'WARNINGS'
  messageId   Mail::Message    undef
  modified    Mail::Message    <false>
  trace       Mail::Reporter   'WARNINGS'
  trusted     Mail::Message    <false>

=over 2

=item Body => ARRAY-OF-LINES

Array of C<"\n"> terminated lines.  If not specified, the lines will be
read from $arg.

=item FoldLength => INTEGER

Number of characters permitted on any refolded header line.
Passed to L<Mail::Message::Replace::MailHeader::new(FoldLength)|Mail::Message::Replace::MailHeader/"METHODS">.

=item Header => OBJECT

The L<Mail::Header> object, which is passed here, is a fake one as well...
It is translated into a L<new(head)|Mail::Message/"Constructors">.  If not given, the header will be
parsed from the $arg.

=item MailFrom => 'IGNORE'|'ERROR'|'COERCE'|'KEEP'

What to do with leading "C<From >" lines in e-mail data.
Passed to L<Mail::Message::Replace::MailHeader::new(MailFrom)|Mail::Message::Replace::MailHeader/"METHODS">.

=item Modify => BOOLEAN

Whether to re-fold all the incoming fields.
Passed to L<Mail::Message::Replace::MailHeader::new(Modify)|Mail::Message::Replace::MailHeader/"METHODS">.

=item body => OBJECT

=item body_type => CLASS

=item deleted => BOOLEAN

=item field_type => CLASS

=item head => OBJECT

=item head_type => CLASS

=item labels => ARRAY|HASH

=item log => LEVEL

=item messageId => STRING

=item modified => BOOLEAN

=item trace => LEVEL

=item trusted => BOOLEAN

=back

example: replace traditional Mail::Internet by this wrapper

  # was
  use Mail::Internet;
  my $mi = Mail::Internet->new(@options);

  # becomes
  use Mail::Message::Replace::MailInternet;
  my $mi = Mail::Internet->new(@options);

=back

=head2 Attributes

=over 4

=item $obj-E<gt>B<MailFrom>( [STRING] )

Your email address.

=back

=head2 Constructing a message

Extends L<"Constructing a message" in Mail::Message|Mail::Message/"Constructing a message">.
 
=over 4

=item $obj-E<gt>B<add_signature>( [$filename] )

Replaced by L<sign()|Mail::Message::Replace::MailInternet/"Constructing a message">, but still usable. $filename is the file which
contains the signature, which defaults to C<$ENV{HOME}/.signature>.

=item $obj-E<gt>B<bounce>( [<$rg_object|%options>] )

Inherited, see L<Mail::Message::Construct::Bounce/"Constructing a message">

=item Mail::Message::Replace::MailInternet-E<gt>B<build>( [$message|$part|$body], $content )

Inherited, see L<Mail::Message::Construct::Build/"Constructing a message">

=item Mail::Message::Replace::MailInternet-E<gt>B<buildFromBody>($body, [$head], $headers)

Inherited, see L<Mail::Message::Construct::Build/"Constructing a message">

=item $obj-E<gt>B<extract>(ARRAY|$fh)

Read header and body from an ARRAY or $fh

=item $obj-E<gt>B<forward>(%options)

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardAttach>(%options)

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardEncapsulate>(%options)

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardInline>(%options)

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardNo>(%options)

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardPostlude>()

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardPrelude>()

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardSubject>(STRING)

Inherited, see L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<read>(ARRAY|$fh, %options)

=item Mail::Message::Replace::MailInternet-E<gt>B<read>(ARRAY|$fh, %options)

Read header and body from the specified ARRAY or $fh.  When used as
object method, L<Mail::Message::read()|Mail::Message::Construct::Read/"Constructing a message"> is called, to be MailBox compliant.
As class method, the Mail::Internet compatible read is called.  %options are
only available in the first case.

 -Option             --Defined in                    --Default
  body_type            Mail::Message::Construct::Read  undef
  strip_status_fields  Mail::Message::Construct::Read  <true>

=over 2

=item body_type => CLASS

=item strip_status_fields => BOOLEAN

=back

=item $obj-E<gt>B<read_body>(ARRAY|$fh)

Read only the message's body from the ARRAY or $fh.

=item $obj-E<gt>B<read_header>(ARRAY|$fh)

Read only the message's header from the ARRAY or $fh

=item $obj-E<gt>B<rebuild>(%options)

Inherited, see L<Mail::Message::Construct::Rebuild/"Constructing a message">

=item $obj-E<gt>B<reply>(%options)

BE WARNED: the main job for creating a reply is done by
L<Mail::Message::reply()|Mail::Message::Construct::Reply/"Constructing a message">, which may produce a result which is compatible,
but may be different from L<Mail::Internet>'s version.

 -Option         --Defined in                     --Default
  Bcc              Mail::Message::Construct::Reply  undef
  Cc               Mail::Message::Construct::Reply  <'cc' in current>
  Exclude                                           []
  From             Mail::Message::Construct::Reply  <'to' in current>
  Inline                                            >
  Keep                                              []
  Message-ID       Mail::Message::Construct::Reply  <uniquely generated>
  ReplyAll                                          <false>
  Subject          Mail::Message::Construct::Reply  replySubject()
  To               Mail::Message::Construct::Reply  <sender in current>
  body             Mail::Message::Construct::Reply  undef
  group_reply      Mail::Message::Construct::Reply  <true>
  header_template                                   $ENV{HOME}/.mailhdr
  include          Mail::Message::Construct::Reply  'INLINE'
  max_signature    Mail::Message::Construct::Reply  10
  message_type     Mail::Message::Construct::Reply  Mail::Message
  postlude         Mail::Message::Construct::Reply  undef
  prelude          Mail::Message::Construct::Reply  undef
  quote            Mail::Message::Construct::Reply  '> '
  signature        Mail::Message::Construct::Reply  undef
  strip_signature  Mail::Message::Construct::Reply  qr/^--\s/

=over 2

=item Bcc => ADDRESSES

=item Cc => ADDRESSES

=item Exclude => ARRAY-OF-NAMES

Remove the fields witht the specified names from the produced reply message.

=item From => ADDRESSES

=item Inline => STRING

Quotation STRING, which is translated into L<reply(quote)|Mail::Message::Construct::Reply/"Constructing a message">.  The normal
default of C<quote> is "E<gt> ", in stead of "E<gt>".

=item Keep => ARRAY-OF-NAMES

Copy all header fields with the specified NAMES from the source to the
reply message.

=item Message-ID => STRING

=item ReplyAll => BOOLEAN

Reply to the group?  Translated into L<reply(group_reply)|Mail::Message::Construct::Reply/"Constructing a message">, which has
as default the exact oposite of this option, being C<true>.

=item Subject => STRING|CODE

=item To => ADDRESSES

=item body => BODY

=item group_reply => BOOLEAN

=item header_template => FILENAME|C<undef>

Read the return header from the template file.  When this is explicitly
set to C<undef>, or the file does not exist, then a header will be created.

=item include => 'NO'|'INLINE'|'ATTACH'

=item max_signature => INTEGER

=item message_type => CLASS

=item postlude => BODY|LINES

=item prelude => BODY|LINES

=item quote => CODE|STRING

=item signature => BODY|MESSAGE

=item strip_signature => REGEXP|STRING|CODE

=back

=item $obj-E<gt>B<replyPrelude>( [STRING|$field|$address|ARRAY-$of-$things] )

Inherited, see L<Mail::Message::Construct::Reply/"Constructing a message">

=item $obj-E<gt>B<replySubject>(STRING)

=item Mail::Message::Replace::MailInternet-E<gt>B<replySubject>(STRING)

Inherited, see L<Mail::Message::Construct::Reply/"Constructing a message">

=item $obj-E<gt>B<sign>(%options)

Add a signature (a few extra lines) to the message.

 -Option   --Default
  File       undef
  Signature  ''

=over 2

=item File => FILENAME

Specifies a filename where the signature is in.

=item Signature => STRING|ARRAY-OF-LINES

The signature in memory.

=back

=back

=head2 The message

Extends L<"The message" in Mail::Message|Mail::Message/"The message">.
 
=over 4

=item $obj-E<gt>B<container>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<isDummy>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<isPart>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<messageId>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<nntppost>(%options)

Send an NNTP message (newsgroup message), which is equivalent to
Mail::Transport::NNTP or L<Mail::Message::send()|Mail::Message/"The message"> with C<via 'nntp'>.

 -Option--Default
  Debug   <false>
  Host    <from Net::Config>
  Port    119

=over 2

=item Debug => BOOLEAN

=item Host => HOSTNAME

=item Port => INTEGER

=back

=item $obj-E<gt>B<partNumber>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<print>( [$fh] )

Prints the whole message to the specified $fh, which default to
STDOUT.  This calls L<Mail::Message::print()|Mail::Message/"The message">.

=item $obj-E<gt>B<send>($type, %options)

Send via Mail Transfer Agents (MUA).  These will be handled by various
L<Mail::Transport::Send|Mail::Transport::Send> extensions.  The C<test> $type is not supported.

=item $obj-E<gt>B<size>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<toplevel>()

Inherited, see L<Mail::Message/"The message">

=item $obj-E<gt>B<write>( [$fh] )

Inherited, see L<Mail::Message/"The message">

=back

=head2 The header

Extends L<"The header" in Mail::Message|Mail::Message/"The header">.
 
=over 4

=item $obj-E<gt>B<add>($lines)

Add header lines, which simply calls C<Mail::Message::Head::add()> on
the header for each specified LINE. The last added LINE is returned.

=item $obj-E<gt>B<bcc>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<cc>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<clean_header>()

Not to be used, replaced by L<header()|Mail::Message::Replace::MailInternet/"The header">.

=item $obj-E<gt>B<combine>( $tag, [$with] )

Not implemented, because I see no use for it.

=item $obj-E<gt>B<date>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<delete>( $name, [$index]] )

Delete the fields with the specified $name.  The deleted fields are
returned.

BE WARNED: if no $name is specified, the C<delete> is interpreted as
the deletion of the message in a folder, so L<Mail::Box::Message::delete()|Mail::Message/"Flags">
will be called.  This may have no negative effect at all...

Calls L<Mail::Message::Replace::MailHeader::delete()|Mail::Message::Replace::MailHeader/"Access to the header">

=item $obj-E<gt>B<destinations>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<fold>( [$length] )

Fold all the fields to a certain maximum $length.
Implemented by L<Mail::Message::Replace::MailHeader::fold()|Mail::Message::Replace::MailHeader/"Simulating Mail::Header">

=item $obj-E<gt>B<fold_length>( [[$tag], $length] )

Set the maximum line $length.  $tag is ignored.
Implemented by L<Mail::Message::Replace::MailHeader::fold_length()|Mail::Message::Replace::MailHeader/"Simulating Mail::Header">

=item $obj-E<gt>B<from>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<get>( $name, [$index] )

Get all the header fields with the specified $name.  In scalar context,
only the first fitting $name is returned.  Even when only one $name is
specified, multiple lines may be returned: some fields appear more than
once in a header.  Calls L<Mail::Message::Replace::MailHeader::get()|Mail::Message::Replace::MailHeader/"Access to the header">

=item $obj-E<gt>B<guessTimestamp>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<head>( [$head] )

Returns the head of the message, or creates an empty one if none is
defined.  The $head argument, which sets the header, is not available
for L<Mail::Internet>, but is there to be compatible with the C<head>
method of L<Mail::Message|Mail::Message>.

=item $obj-E<gt>B<header>( [ARRAY] )

Optionally reads a header from the ARRAY, and then returns those fields
as array-ref nicely folded.
Implemented by L<Mail::Message::Replace::MailHeader::header()|Mail::Message::Replace::MailHeader/"Simulating Mail::Header">

=item $obj-E<gt>B<nrLines>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<print_header>($fh)

Calls L<Mail::Message::Head::Complete::print()|Mail::Message::Head::Complete/"Access to the header">.

=item $obj-E<gt>B<replace>( $tag, $line, [$index] )

Adds LINES to the header, but removes fields with the same name if they
already exist.  Calls L<Mail::Message::Replace::MailHeader::replace()|Mail::Message::Replace::MailHeader/"Access to the header">

=item $obj-E<gt>B<sender>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<study>($fieldname)

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<subject>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<tidy_headers>()

No effect anymore (always performed).

=item $obj-E<gt>B<timestamp>()

Inherited, see L<Mail::Message/"The header">

=item $obj-E<gt>B<to>()

Inherited, see L<Mail::Message/"The header">

=back

=head2 The body

Extends L<"The body" in Mail::Message|Mail::Message/"The body">.
 
=over 4

=item $obj-E<gt>B<body>($lines|@lines)

Returns an ARRAY of lines, representing the body.  With arguments, a
new body will be created.  In L<Mail::Internet>, the body is not an
object but a simple array.

BE WARNED: this overrules the L<Mail::Message::body()|Mail::Message/"The body"> method, which
may cause some confusion.  Use L<bodyObject()|Mail::Message::Replace::MailInternet/"The body"> to get access to that
body's data.

=item $obj-E<gt>B<bodyObject>( [$body] )

Calls L<Mail::Message::body()|Mail::Message/"The body">, because that C<body> method is overruled
by the one which has a L<Mail::Internet> compatible interface.

=item $obj-E<gt>B<contentType>()

Inherited, see L<Mail::Message/"The body">

=item $obj-E<gt>B<decoded>(%options)

Inherited, see L<Mail::Message/"The body">

=item $obj-E<gt>B<encode>(%options)

Inherited, see L<Mail::Message/"The body">

=item $obj-E<gt>B<isMultipart>()

Inherited, see L<Mail::Message/"The body">

=item $obj-E<gt>B<isNested>()

Inherited, see L<Mail::Message/"The body">

=item $obj-E<gt>B<parts>( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )

Inherited, see L<Mail::Message/"The body">

=item $obj-E<gt>B<print_body>( [$fh] )

Prints the body to the specified $fh, which defaults to STDOUT.  This
calls L<Mail::Message::Body::print()|Mail::Message::Body/"Access to the payload">.

=item $obj-E<gt>B<remove_sig>( [$nrlines] )

Remove the signature of a message with a maximum of $nrlines lines, which
defaults to 10.  The work is done on the decoded body content, by
L<Mail::Message::Body::stripSignature()|Mail::Message::Body::Construct/"Constructing a body">.

=item $obj-E<gt>B<smtpsend>(%options)

This method is calling L<Mail::Message::send()|Mail::Message/"The message"> via C<smtp>, which is
implemented in L<Mail::Transport::SMTP|Mail::Transport::SMTP>.  The implementation is
slightly different, so this method is not 100% compliant.

 -Option  --Default
  Debug     <false>
  Hello     <helo_domain from Net::Config>
  Host      $ENV{SMTPHOSTS} or from Net::Config
  MailFrom  $ENV{MAILADDRESS} or $ENV{USER}
  Port      25

=over 2

=item Debug => BOOLEAN

=item Hello => STRING

=item Host => HOSTNAME

Only the first detected HOSTNAME is taken, so differs from the original
implementation.

=item MailFrom => STRING

Your e-mail address.  This simulated L<Mail::Internet> object does not
try to create an e-mail address from the sendmail configuration file,
because that is generally a bad idea in environments with virtual hosts,
as we have now-adays.

=item Port => INTEGER

=back

=item $obj-E<gt>B<tidy_body>()

Removes blank lines from begin and end of the body.

=back

=head2 Flags

Extends L<"Flags" in Mail::Message|Mail::Message/"Flags">.
 
=over 4

=item $obj-E<gt>B<deleted>( [BOOLEAN] )

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<isDeleted>()

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<isModified>()

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<label>($label|PAIRS)

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<labels>()

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<labelsToStatus>()

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<modified>( [BOOLEAN] )

Inherited, see L<Mail::Message/"Flags">

=item $obj-E<gt>B<statusToLabels>()

Inherited, see L<Mail::Message/"Flags">

=back

=head2 The whole message as text

Extends L<"The whole message as text" in Mail::Message|Mail::Message/"The whole message as text">.
 
=over 4

=item $obj-E<gt>B<as_mbox_string>()

Returns the whole message as one string, which can be included in an
MBOX folder (while not using L<Mail::Box::Mbox|Mail::Box::Mbox>).  Lines in the body
which start with C<From > are escaped with an E<gt>.

=item $obj-E<gt>B<file>()

Inherited, see L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<lines>()

Inherited, see L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<printStructure>( [$fh|undef],[$indent] )

Inherited, see L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<string>()

Inherited, see L<Mail::Message::Construct::Text/"The whole message as text">

=back

=head2 The nasty bits

=over 4

=item $obj-E<gt>B<isa>($class)

=item Mail::Message::Replace::MailInternet-E<gt>B<isa>($class)

Of course, the C<isa()> class inheritance check should not see our
nasty trick.

=back

=head2 Internals

Extends L<"Internals" in Mail::Message|Mail::Message/"Internals">.
 
=over 4

=item $obj-E<gt>B<clonedFrom>()

Inherited, see L<Mail::Message/"Internals">

=item Mail::Message::Replace::MailInternet-E<gt>B<coerce>($message)

Coerce (adapt type) of the specified $message (anything
L<Mail::Message::coerce()|Mail::Message/"Internals"> accepts) into an L<Mail::Internet|Mail::Internet> simulating
object.

=item $obj-E<gt>B<isDelayed>()

Inherited, see L<Mail::Message/"Internals">

=item $obj-E<gt>B<readBody>( $parser, $head, [$bodytype] )

Inherited, see L<Mail::Message/"Internals">

=item $obj-E<gt>B<readFromParser>( $parser, [$bodytype] )

Inherited, see L<Mail::Message/"Internals">

=item $obj-E<gt>B<readHead>( $parser, [$class] )

Inherited, see L<Mail::Message/"Internals">

=item $obj-E<gt>B<recursiveRebuildPart>($part, %options)

Inherited, see L<Mail::Message::Construct::Rebuild/"Internals">

=item $obj-E<gt>B<storeBody>($body)

Inherited, see L<Mail::Message/"Internals">

=item $obj-E<gt>B<takeMessageId>( [STRING] )

Inherited, see L<Mail::Message/"Internals">

=back

=head2 Error handling

Extends L<"Error handling" in Mail::Message|Mail::Message/"Error handling">.
 
=over 4

=item $obj-E<gt>B<AUTOLOAD>()

Inherited, see L<Mail::Message::Construct/"METHODS">

=item $obj-E<gt>B<addReport>($object)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

=item Mail::Message::Replace::MailInternet-E<gt>B<defaultTrace>( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>( [$level, [$strings]] )

=item Mail::Message::Replace::MailInternet-E<gt>B<log>( [$level, [$strings]] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>($level)

=item Mail::Message::Replace::MailInternet-E<gt>B<logPriority>($level)

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>()

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<shortSize>( [$value] )

=item Mail::Message::Replace::MailInternet-E<gt>B<shortSize>( [$value] )

Inherited, see L<Mail::Message/"Error handling">

=item $obj-E<gt>B<shortString>()

Inherited, see L<Mail::Message/"Error handling">

=item $obj-E<gt>B<trace>( [$level] )

Inherited, see L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>()

Inherited, see L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

Extends L<"Cleanup" in Mail::Message|Mail::Message/"Cleanup">.
 
=over 4

=item $obj-E<gt>B<DESTROY>()

Inherited, see L<Mail::Reporter/"Cleanup">

=item $obj-E<gt>B<destruct>()

Inherited, see L<Mail::Message/"Cleanup">

=back

=head1 DETAILS

Extends L<"DETAILS" in Mail::Message|Mail::Message/"DETAILS">.
 
=head1 DIAGNOSTICS

=over 4

=item Error: Cannot include forward source as $include.

Unknown alternative for the L<forward(include)|Mail::Message::Construct::Forward/"Constructing a message">.  Valid choices are
C<NO>, C<INLINE>, C<ATTACH>, and C<ENCAPSULATE>.

=item Error: Mail::Internet does not support this kind of data

The ARGS data can only be a file handle or an ARRAY.  Other data types
are not supported (see L<read()|Mail::Message::Replace::MailInternet/"Constructing a message"> if you want to have more).

=item Error: Method bounce requires To, Cc, or Bcc

The message L<bounce()|Mail::Message::Construct::Bounce/"Constructing a message"> method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for L<reply()|Mail::Message::Replace::MailInternet/"Constructing a message">. When you wish to modify the content, use
L<forward()|Mail::Message::Construct::Forward/"Constructing a message">.

=item Error: Method forwardAttach requires a preamble

=item Error: Method forwardEncapsulate requires a preamble

=item Error: No address to create forwarded to.

If a forward message is created, a destination address must be specified.

=item Error: No rebuild rule $name defined.

=item Error: Only build() Mail::Message's; they are not in a folder yet

You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal L<Mail::Message|Mail::Message>, and then add it to the folder.  During this
L<Mail::Box::addMessage()|Mail::Box/"The folder"> process, the message will get L<coerce()|Mail::Message::Replace::MailInternet/"Internals">-d
into the right message type, adding storage information and the like.

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.120,
built on September 21, 2016. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2016 by [Mark Overmeer]. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

