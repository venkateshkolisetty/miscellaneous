=head1 NAME

Gtk2::Notify - Perl interface to libnotify

=cut

=head1 HIERARCHY

  Glib::Object
  +----Gtk2::Notify



=cut

=for object Gtk2::Notify - Perl interface to libnotify
=cut

=head1 SYNOPSIS

    use Gtk2::Notify -init, "app_name";

    my $notification = Gtk2::Notify->new(
            $summary,
            $message,
            $icon,
            $attach_widget
    );
    $notification->show;

=head1 INITIALISATION

    use Gtk2::Notify qw/-init app_name/;

=over

=item -init

Importing Gtk2::Notify with the -init option requires one additional argument:
the application name to use. This is equivalent to
C<Gtk2::Notify-E<gt>init($app_name)>.

=back

=cut




=head1 METHODS

=head2 notify = Gtk2::Notify-E<gt>B<new> ($summary, $body=undef, $icon=undef)

=over

=item * $summary (string) 

=item * $body (string) 

=item * $icon (string) 

=back

=head2 $notification-E<gt>B<add_action> ($action, $label, $callback, $userdata=undef)

=over

=item * $action (string) 

=item * $label (string) 

=item * $callback (scalar) 

=item * $userdata (scalar) 

=back

=head2 string = Gtk2::Notify-E<gt>B<get_app_name> 

=head2 $notification-E<gt>B<set_category> ($category)

=over

=item * $category (string) 

=back

=head2 $notification-E<gt>B<clear_actions> 

=head2 $notification-E<gt>B<clear_hints> 

=head2 notify = $notification-E<gt>B<close> 

=head2 $notification-E<gt>B<set_hint_byte_array> ($key, $value)

=over

=item * $key (string) 

=item * $value ((unknown)) 

=back

=head2 $notification-E<gt>B<set_hint_byte> ($key, $value)

=over

=item * $key (string) 

=item * $value (Glib::UChar) 

=back

=head2 $notification-E<gt>B<set_hint_double> ($key, $value)

=over

=item * $key (string) 

=item * $value (double) 

=back

=head2 $notification-E<gt>B<set_hint_int32> ($key, $value)

=over

=item * $key (string) 

=item * $value (integer) 

=back

=head2 $notification-E<gt>B<set_hint> ($key, $value)

=over

=item * $key (string) 

=item * $value (scalar) 

=back

=head2 $notification-E<gt>B<set_hint_string> ($key, $value)

=over

=item * $key (string) 

=item * $value (string) 

=back

=head2 $notification-E<gt>B<set_icon_from_pixbuf> ($icon)

=over

=item * $icon (Gtk2::Gdk::Pixbuf) 

=back

=head2 boolean = Gtk2::Notify-E<gt>B<init> ($app_name)

=over

=item * $app_name (string) 

=back

=head2 boolean = Gtk2::Notify-E<gt>B<is_initted> 

=head2 list = Gtk2::Notify-E<gt>B<get_server_caps> 

=head2 (notify, name, vendor, version, spec_version) = Gtk2::Notify-E<gt>B<get_server_info> 

=head2 notify = $notification-E<gt>B<show> 

=head2 $notification-E<gt>B<set_timeout> ($timeout)

=over

=item * $timeout (integer) 

=back

=head2 Gtk2::Notify-E<gt>B<uninit> 

=head2 boolean = $notification-E<gt>B<update> ($summary, $message=undef, $icon=undef)

=over

=item * $summary (string) 

=item * $message (string) 

=item * $icon (string) 

=back

=head2 $notification-E<gt>B<set_urgency> ($urgency)

=over

=item * $urgency (Gtk2::Notify::NotifyUrgency) 

=back



=cut


=head1 PROPERTIES

=over

=item 'app-name' (string : default undef : readable / writable)

The application name to use for this notification

=item 'body' (string : default undef : readable / writable / construct)

The message body text

=item 'closed-reason' (integer : default -1 : readable)

The reason code for why the notification was closed

=item 'icon-name' (string : default undef : readable / writable / construct)

The icon filename or icon theme-compliant name

=item 'id' (integer : default 0 : readable / writable / construct)

The notification ID

=item 'summary' (string : default undef : readable / writable / construct)

The summary text

=back



=cut


=head1 SIGNALS

=over

=item B<closed> (Gtk2::Notify)

=back



=cut


=head1 ENUMS AND FLAGS

=head2 enum Gtk2::Notify::NotifyUrgency

=over

=item * 'low' / 'NOTIFY_URGENCY_LOW'

=item * 'normal' / 'NOTIFY_URGENCY_NORMAL'

=item * 'critical' / 'NOTIFY_URGENCY_CRITICAL'

=back




=cut

=for position post_enums

=head1 BUGS

Please report any bugs or feature requests to
C<bug-gtk2-notify at rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Gtk2-Notify>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Gtk2::Notify

You can also look for information at:

=over 4

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Gtk2-Notify>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Gtk2-Notify>

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Gtk2-Notify>

=item * Search CPAN

L<http://search.cpan.org/dist/Gtk2-Notify>

=back

=cut




=head1 SEE ALSO

L<Gtk2::Notify>, L<Glib::Object>


=cut


=head1 COPYRIGHT

Copyright (C) 2006-2008 by Florian Ragwitz


=cut

