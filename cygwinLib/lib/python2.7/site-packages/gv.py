# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gv', [dirname(__file__)])
        except ImportError:
            import _gv
            return _gv
        if fp is not None:
            try:
                _mod = imp.load_module('_gv', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gv = swig_import_helper()
    del swig_import_helper
else:
    import _gv
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def digraph(name):
    return _gv.digraph(name)
digraph = _gv.digraph

def strictgraph(name):
    return _gv.strictgraph(name)
strictgraph = _gv.strictgraph

def strictdigraph(name):
    return _gv.strictdigraph(name)
strictdigraph = _gv.strictdigraph

def readstring(string):
    return _gv.readstring(string)
readstring = _gv.readstring

def read(*args):
    return _gv.read(*args)
read = _gv.read

def graph(*args):
    return _gv.graph(*args)
graph = _gv.graph

def node(g, name):
    return _gv.node(g, name)
node = _gv.node

def edge(*args):
    return _gv.edge(*args)
edge = _gv.edge

def setv(*args):
    return _gv.setv(*args)
setv = _gv.setv

def getv(*args):
    return _gv.getv(*args)
getv = _gv.getv

def nameof(*args):
    return _gv.nameof(*args)
nameof = _gv.nameof

def findsubg(g, name):
    return _gv.findsubg(g, name)
findsubg = _gv.findsubg

def findnode(g, name):
    return _gv.findnode(g, name)
findnode = _gv.findnode

def findedge(t, h):
    return _gv.findedge(t, h)
findedge = _gv.findedge

def findattr(*args):
    return _gv.findattr(*args)
findattr = _gv.findattr

def headof(e):
    return _gv.headof(e)
headof = _gv.headof

def tailof(e):
    return _gv.tailof(e)
tailof = _gv.tailof

def graphof(*args):
    return _gv.graphof(*args)
graphof = _gv.graphof

def rootof(g):
    return _gv.rootof(g)
rootof = _gv.rootof

def protonode(g):
    return _gv.protonode(g)
protonode = _gv.protonode

def protoedge(g):
    return _gv.protoedge(g)
protoedge = _gv.protoedge

def ok(*args):
    return _gv.ok(*args)
ok = _gv.ok

def firstsubg(g):
    return _gv.firstsubg(g)
firstsubg = _gv.firstsubg

def nextsubg(g, sg):
    return _gv.nextsubg(g, sg)
nextsubg = _gv.nextsubg

def firstsupg(g):
    return _gv.firstsupg(g)
firstsupg = _gv.firstsupg

def nextsupg(g, sg):
    return _gv.nextsupg(g, sg)
nextsupg = _gv.nextsupg

def firstedge(*args):
    return _gv.firstedge(*args)
firstedge = _gv.firstedge

def nextedge(*args):
    return _gv.nextedge(*args)
nextedge = _gv.nextedge

def firstout(*args):
    return _gv.firstout(*args)
firstout = _gv.firstout

def nextout(*args):
    return _gv.nextout(*args)
nextout = _gv.nextout

def firsthead(n):
    return _gv.firsthead(n)
firsthead = _gv.firsthead

def nexthead(n, h):
    return _gv.nexthead(n, h)
nexthead = _gv.nexthead

def firstin(*args):
    return _gv.firstin(*args)
firstin = _gv.firstin

def nextin(*args):
    return _gv.nextin(*args)
nextin = _gv.nextin

def firsttail(n):
    return _gv.firsttail(n)
firsttail = _gv.firsttail

def nexttail(n, t):
    return _gv.nexttail(n, t)
nexttail = _gv.nexttail

def firstnode(*args):
    return _gv.firstnode(*args)
firstnode = _gv.firstnode

def nextnode(*args):
    return _gv.nextnode(*args)
nextnode = _gv.nextnode

def firstattr(*args):
    return _gv.firstattr(*args)
firstattr = _gv.firstattr

def nextattr(*args):
    return _gv.nextattr(*args)
nextattr = _gv.nextattr

def rm(*args):
    return _gv.rm(*args)
rm = _gv.rm

def layout(g, engine):
    return _gv.layout(g, engine)
layout = _gv.layout

def render(*args):
    return _gv.render(*args)
render = _gv.render

def renderresult(g, format, outdata):
    return _gv.renderresult(g, format, outdata)
renderresult = _gv.renderresult

def renderchannel(g, format, channelname):
    return _gv.renderchannel(g, format, channelname)
renderchannel = _gv.renderchannel

def renderdata(g, format):
    return _gv.renderdata(g, format)
renderdata = _gv.renderdata

def write(*args):
    return _gv.write(*args)
write = _gv.write
# This file is compatible with both classic and new-style classes.


